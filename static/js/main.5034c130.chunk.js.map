{"version":3,"sources":["component/poker-card/PokerCard.js","component/dashboard/CardPanel.js","component/dashboard/RightSidePanel.js","component/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["PokerCard","value","Card","style","width","Body","Title","Text","CardPanel","cards","Container","forEach","element","Component","RightSidePanel","Row","Img","variant","src","Button","Dashboard","fluid","className","Col","xs","md","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAGe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAClC,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,KAAaL,GACb,kBAACC,EAAA,EAAKK,KAAN,0G,ICLWC,E,4MACnBC,MAAQ,SAACR,GACP,OAAO,kBAACD,EAAD,CAAWC,MAAOA,K,uDAGjB,IAAD,OAEP,OACE,kBAACS,EAAA,EAAD,KACE,kBAACV,EAAD,CAAWC,MAAM,aAHF,CAAC,EAAG,GAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAI/BU,SAAQ,SAACC,GAAD,OAAa,EAAKH,MAAMG,W,GAVbC,a,QCDxB,SAASC,IACtB,OACE,6BACG,IACD,kBAACC,EAAA,EAAD,KACG,IACD,kBAACb,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKc,IAAN,CAAUC,QAAQ,MAAMC,IAAI,uBAC5B,kBAAChB,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,mBACA,kBAACJ,EAAA,EAAKK,KAAN,uGAIA,kBAACY,EAAA,EAAD,CAAQF,QAAQ,WAAhB,mBAIN,kBAACF,EAAA,EAAD,KACE,kBAACb,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKc,IAAN,CAAUC,QAAQ,MAAMC,IAAI,uBAC5B,kBAAChB,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,mBACA,kBAACJ,EAAA,EAAKK,KAAN,uGAIA,kBAACY,EAAA,EAAD,CAAQF,QAAQ,WAAhB,oBCvBG,SAASG,IACtB,OACE,kBAACV,EAAA,EAAD,CAAWW,MAAM,KAAKC,UAAU,6CAC7B,IACD,kBAACP,EAAA,EAAD,KACE,kBAACQ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,OAEF,kBAACD,EAAA,EAAD,CAAKE,GAAG,QACL,IACD,kBAACX,EAAD,SCFKY,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAACF,EAAD,QCEcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5034c130.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nexport default function PokerCard({ value }) {\n  return (\n    <div>\n      <Card style={{ width: \"10rem\" }}>\n        <Card.Body>\n          <Card.Title>{value}</Card.Title>\n          <Card.Text>\n            Some quick example text to build on the card title and make up the\n            bulk of the card's content.\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport PokerCard from \"../poker-card/PokerCard\";\n\nexport default class CardPanel extends Component {\n  cards = (value) => {\n    return <PokerCard value={value} />;\n  };\n\n  render() {\n    const cardValues = [0, 0.5, 1, 2, 3, 5, 8, 13, 20];\n    return (\n      <Container>\n        <PokerCard value=\"Infinity\" />\n        {cardValues.forEach((element) => this.cards(element))}\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport { Card, Button, CardGroup, Row } from \"react-bootstrap\";\n\nexport default function RightSidePanel() {\n  return (\n    <div>\n      {\" \"}\n      <Row>\n        {\" \"}\n        <Card style={{ width: \"18rem\" }}>\n          <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the\n              bulk of the card's content.\n            </Card.Text>\n            <Button variant=\"primary\">Go somewhere</Button>\n          </Card.Body>\n        </Card>\n      </Row>\n      <Row>\n        <Card style={{ width: \"18rem\" }}>\n          <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n          <Card.Body>\n            <Card.Title>Card Title</Card.Title>\n            <Card.Text>\n              Some quick example text to build on the card title and make up the\n              bulk of the card's content.\n            </Card.Text>\n            <Button variant=\"primary\">Go somewhere</Button>\n          </Card.Body>\n        </Card>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Col, Row, Container } from \"react-bootstrap\";\n\nimport CardPanel from \"./CardPanel\";\nimport RightSidePanel from \"./RightSidePanel\";\n\nexport default function Dashboard() {\n  return (\n    <Container fluid=\"sm\" className=\"pr-4 p-1 flex-fill justify-content-center\">\n      {\" \"}\n      <Row>\n        <Col xs={8}>\n          <CardPanel />\n        </Col>\n        <Col md=\"auto\">\n          {\" \"}\n          <RightSidePanel />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Dashboard from \"./component/dashboard/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}