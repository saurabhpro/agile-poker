{"version":3,"sources":["component/icon/infinity.svg","component/poker-card/PokerCard.js","component/Firebase/context.js","component/Firebase/config.js","component/Firebase/index.js","component/Firebase/firebase.js","component/poker-card/AllCardsPanel.js","component/dashboard/CardPanel.js","component/dashboard/team/Team.js","component/dashboard/RightSidePanel.js","component/dashboard/Dashboard.js","component/App.js","serviceWorker.js","index.js"],"names":["module","exports","PokerCard","props","state","value","storyPoint","style","getDisplayableValue","Card","Img","variant","src","infinity","alt","onClick","bind","storePoint","this","className","id","Body","Component","React","createContext","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","firebase","database","AllCardsPanel","useState","cardValues","setCardValues","undefined","selectedSP","setSelectedSP","useEffect","collection","onSnapshot","snapshot","sp","docs","map","point","data","numeric","lockStoryPointCard","Container","CardDeck","cards","console","log","sort","forEach","element","push","key","width","height","disabled","getAllCards","CardPanel","Team","margin","border","RightSidePanel","Row","Title","Text","Button","Dashboard","fluid","Col","xs","md","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee3b4911.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/infinity.cf7b1a96.svg\";","import React, { Component } from 'react';\nimport { Card } from 'react-bootstrap';\n\nimport './PokerCard.css';\nimport infinity from '../icon/infinity.svg';\n\nclass PokerCard extends Component {\n  state = {\n    value: {\n      storyPoint: this.props.value,\n      style: this.props.style,\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  getDisplayableValue = () => {\n    return this.state.value.storyPoint !== 'Infinity' ? (\n      this.state.value.storyPoint\n    ) : (\n      <Card.Img variant=\"center\" src={infinity} alt=\"Infinity\" />\n    );\n  };\n\n  onClick = (value) => {\n    this.props.onClick(value);\n  };\n\n  render() {\n    const storePoint = this.getDisplayableValue();\n    const { value } = this.state;\n\n    return (\n      <div>\n        <Card\n          style={value.style}\n          className=\"m-1 pokerCard\"\n          id={value.storyPoint}\n          onClick={() => this.onClick(value.storyPoint)}\n        >\n          <Card.Body>\n            <h4>{storePoint}</h4>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default PokerCard;\n","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport default FirebaseContext;\n","const config = {\n  apiKey: 'AIzaSyB7eDqSi97maZL5LjOSBrnbRUrqDVOKuVw',\n  authDomain: 'agile-poker-sk.firebaseapp.com',\n  databaseURL: 'https://agile-poker-sk.firebaseio.com',\n  projectId: 'agile-poker-sk',\n  storageBucket: 'agile-poker-sk.appspot.com',\n  messagingSenderId: '243041283381',\n  appId: '1:243041283381:web:59f749904068703030307c',\n  measurementId: 'G-PLT1CHSW9K',\n};\nexport default config;\n","/*\nFor a well-encapsulated Firebase module, we'll define a index.js file in our Firebase folder that exports all necessary functionalities (Firebase class, Firebase context for Consumer and Provider components):\n*/\n\nimport FirebaseContext from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext };\n","// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport * as firebase from 'firebase/app';\n\n// Add the Firebase services that you want to use\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nimport config from './config';\n\nclass Firebase {\n  constructor() {\n    firebase.initializeApp(config);\n\n    this.auth = firebase.auth();\n    this.database = firebase.firestore();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = (email) =>\n    this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = (password) =>\n    this.auth.currentUser.updatePassword(password);\n}\n\nexport default Firebase;\n","import React, { useState, useEffect } from 'react';\nimport { Container, CardDeck } from 'react-bootstrap';\nimport PokerCard from './PokerCard';\nimport Firebase from '../Firebase';\n\nexport default function AllCardsPanel() {\n  const [cardValues, setCardValues] = useState([]);\n  const [selectedSP, setSelectedSP] = useState(undefined);\n\n  // cardValues: [1, 2, 3, 5, 8, 13, 20, Infinity],\n  //   selectedSP: undefined,\n\n  useEffect(() => {\n    new Firebase().database\n      .collection('points')\n      .onSnapshot((snapshot) => {\n        const sp = snapshot.docs.map((point) => point.data().numeric);\n        setCardValues(sp[0]);\n      });\n  }, []);\n\n  const lockStoryPointCard = (value) => {\n    setSelectedSP(value);\n    setCardValues([value]);\n  };\n\n  const getStyle = (value) => {\n    return {\n      width: '10rem',\n      height: '15em',\n      disabled: selectedSP !== value,\n    };\n  };\n\n  const getAllCards = () => {\n    const cards = [];\n    console.log(cardValues);\n\n    cardValues.sort().forEach((element) => {\n      cards.push(\n        <PokerCard\n          key={element}\n          value={element}\n          style={getStyle(element)}\n          onClick={lockStoryPointCard}\n        />,\n      );\n    });\n\n    return cards;\n  };\n\n  return (\n    <Container>\n      <CardDeck>{getAllCards()}</CardDeck>\n    </Container>\n  );\n}\n","import React from 'react';\nimport AllCardsPanel from '../poker-card/AllCardsPanel';\n\nexport default function CardPanel() {\n  return (\n    <div>\n      <AllCardsPanel />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class Team extends Component {\n  render() {\n    return (\n      <ul>\n        <li>Ram</li>\n        <li>Shyam</li>\n        <li>ok</li>\n      </ul>\n    );\n  }\n}\n","import React from 'react';\nimport { Card, Button, Row } from 'react-bootstrap';\nimport Team from './team/Team';\n\nconst style = { width: '18rem', margin: '1em', border: 'none' };\n\nexport default function RightSidePanel() {\n  return (\n    <div>\n      <Row>\n        <Card style={style}>\n          <Card.Body>\n            <Card.Title>Team</Card.Title>\n\n            <Team />\n          </Card.Body>\n        </Card>\n      </Row>\n      <Row>\n        <Card style={style}>\n          <Card.Body>\n            <Card.Title>Poker</Card.Title>\n            <Card.Text>Just select one</Card.Text>\n            <Button variant=\"primary\">Reset</Button>\n          </Card.Body>\n        </Card>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { Col, Row, Container } from 'react-bootstrap';\n\nimport CardPanel from './CardPanel';\nimport RightSidePanel from './RightSidePanel';\n\nexport default function Dashboard() {\n  return (\n    <Container\n      fluid=\"sm\"\n      className=\"mr-4 p-1 flex-fill justify-content-center\"\n    >\n      <Row>\n        <Col xs={8}>\n          <CardPanel />\n        </Col>\n        <Col md=\"auto\">\n          <RightSidePanel />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Dashboard from './dashboard/Dashboard';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}